//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Qos.V2.Http;



namespace Unity.Services.Qos.V2.Models
{
    /// <summary>
    /// A dictionary of server annotations.
    /// </summary>
    [Preserve]
    [DataContract(Name = "QosServerAnnotations")]
    public class QosServerAnnotations
    {
        /// <summary>
        /// A dictionary of server annotations.
        /// </summary>
        /// <param name="projectId">projectId param</param>
        /// <param name="environmentId">environmentId param</param>
        /// <param name="relayRegionId">relayRegionId param</param>
        /// <param name="multiplayRegionId">multiplayRegionId param</param>
        /// <param name="multiplayFleetId">multiplayFleetId param</param>
        /// <param name="matchmakerQueueName">matchmakerQueueName param</param>
        /// <param name="matchmakerPoolId">matchmakerPoolId param</param>
        [Preserve]
        public QosServerAnnotations(List<string> projectId = default, List<string> environmentId = default, List<string> relayRegionId = default, List<string> multiplayRegionId = default, List<string> multiplayFleetId = default, List<string> matchmakerQueueName = default, List<string> matchmakerPoolId = default)
        {
            ProjectId = projectId;
            EnvironmentId = environmentId;
            RelayRegionId = relayRegionId;
            MultiplayRegionId = multiplayRegionId;
            MultiplayFleetId = multiplayFleetId;
            MatchmakerQueueName = matchmakerQueueName;
            MatchmakerPoolId = matchmakerPoolId;
        }

        /// <summary>
        /// Parameter projectId of QosServerAnnotations
        /// </summary>
        [Preserve]
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public List<string> ProjectId{ get; }

        /// <summary>
        /// Parameter environmentId of QosServerAnnotations
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", EmitDefaultValue = false)]
        public List<string> EnvironmentId{ get; }

        /// <summary>
        /// Parameter relayRegionId of QosServerAnnotations
        /// </summary>
        [Preserve]
        [DataMember(Name = "relayRegionId", EmitDefaultValue = false)]
        public List<string> RelayRegionId{ get; }

        /// <summary>
        /// Parameter multiplayRegionId of QosServerAnnotations
        /// </summary>
        [Preserve]
        [DataMember(Name = "multiplayRegionId", EmitDefaultValue = false)]
        public List<string> MultiplayRegionId{ get; }

        /// <summary>
        /// Parameter multiplayFleetId of QosServerAnnotations
        /// </summary>
        [Preserve]
        [DataMember(Name = "multiplayFleetId", EmitDefaultValue = false)]
        public List<string> MultiplayFleetId{ get; }

        /// <summary>
        /// Parameter matchmakerQueueName of QosServerAnnotations
        /// </summary>
        [Preserve]
        [DataMember(Name = "matchmakerQueueName", EmitDefaultValue = false)]
        public List<string> MatchmakerQueueName{ get; }

        /// <summary>
        /// Parameter matchmakerPoolId of QosServerAnnotations
        /// </summary>
        [Preserve]
        [DataMember(Name = "matchmakerPoolId", EmitDefaultValue = false)]
        public List<string> MatchmakerPoolId{ get; }

        /// <summary>
        /// Formats a QosServerAnnotations into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (ProjectId != null)
            {
                serializedModel += "projectId," + ProjectId.ToString() + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId.ToString() + ",";
            }
            if (RelayRegionId != null)
            {
                serializedModel += "relayRegionId," + RelayRegionId.ToString() + ",";
            }
            if (MultiplayRegionId != null)
            {
                serializedModel += "multiplayRegionId," + MultiplayRegionId.ToString() + ",";
            }
            if (MultiplayFleetId != null)
            {
                serializedModel += "multiplayFleetId," + MultiplayFleetId.ToString() + ",";
            }
            if (MatchmakerQueueName != null)
            {
                serializedModel += "matchmakerQueueName," + MatchmakerQueueName.ToString() + ",";
            }
            if (MatchmakerPoolId != null)
            {
                serializedModel += "matchmakerPoolId," + MatchmakerPoolId.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a QosServerAnnotations as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (ProjectId != null)
            {
                var projectIdStringValue = ProjectId.ToString();
                dictionary.Add("projectId", projectIdStringValue);
            }

            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }

            if (RelayRegionId != null)
            {
                var relayRegionIdStringValue = RelayRegionId.ToString();
                dictionary.Add("relayRegionId", relayRegionIdStringValue);
            }

            if (MultiplayRegionId != null)
            {
                var multiplayRegionIdStringValue = MultiplayRegionId.ToString();
                dictionary.Add("multiplayRegionId", multiplayRegionIdStringValue);
            }

            if (MultiplayFleetId != null)
            {
                var multiplayFleetIdStringValue = MultiplayFleetId.ToString();
                dictionary.Add("multiplayFleetId", multiplayFleetIdStringValue);
            }

            if (MatchmakerQueueName != null)
            {
                var matchmakerQueueNameStringValue = MatchmakerQueueName.ToString();
                dictionary.Add("matchmakerQueueName", matchmakerQueueNameStringValue);
            }

            if (MatchmakerPoolId != null)
            {
                var matchmakerPoolIdStringValue = MatchmakerPoolId.ToString();
                dictionary.Add("matchmakerPoolId", matchmakerPoolIdStringValue);
            }

            return dictionary;
        }
    }
}
